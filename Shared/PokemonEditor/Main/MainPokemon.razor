@implements IDisposable

@{
    var pkm = PE.PKM; ;
    var saveFile = SE.SAV;
}

<div style="border: 1px solid black;
  position: relative;
  width: 68px;
  height: 56px;">
    <PokemonWithItem Pokemon="pkm" />
</div>

<div class="d-flex flex-col">
    <MudCheckBox Checked="@pkm.IsShiny" CheckedChanged="@((bool value) => pkm.SetShiny())" Color="Color.Warning"
                 CheckedIcon="@Icons.Material.Filled.Star" UncheckedIcon="@Icons.Material.Filled.StarOutline"
                 Disabled="@pkm.IsShiny" />
    @if (saveFile.Generation >= 3)
    {
        //TODO: disabled for now
        <MudTextField Value="@pkm.PID.ToString("X")" Label="PID" Variant="Variant.Text" Disabled />
        <MudButton Variant="Variant.Filled" Size="Size.Small" @onclick="@(() => pkm.SetPIDGender(pkm.Gender))">
            Reroll
        </MudButton>
    }
</div>

<MudAutocomplete Margin="Margin.Dense" Dense="true" T="int" Value="pkm.Species" SearchFunc="@Search"
                 ToStringFunc="@(e=> GameInfo.SpeciesDataSource.FirstOrDefault(t => t.Value == e)?.Text)" MaxItems="8"
                 ValueChanged="SpeciesChanged" Label="Species">
    <ItemTemplate Context="idx">
        <img src="@SpriteService.GetPokemonBySpeciesId(idx)" alt="" /> @(GameInfo.SpeciesDataSource.FirstOrDefault(t
        =>t.Value == idx)?.Text ?? "Bika")
    </ItemTemplate>
</MudAutocomplete>

<div class="d-flex flex-col">
    <MudCheckBox Checked="@pkm.IsNicknamed" CheckedChanged="@((bool value) => SetIsNicknamed(value))" />
    <MudTextField Value="pkm.Nickname" ValueChanged="@((string value) => SetNickname(value))" Immediate="true"
                  Label="Nickname" Variant="Variant.Text" MaxLength="saveFile.NickLength" Counter="saveFile.NickLength" />
</div>

<div class="d-flex flex-col">
    <MudNumericField @bind-Value="pkm.EXP" Immediate Label="EXP" Variant="Variant.Text" Class="mr-2" />
    <MudNumericField @bind-Value="pkm.CurrentLevel" Immediate Label="LEVEL" Variant="Variant.Text" />
</div>

@if (saveFile.Generation >= 3)
{
    <MudAutocomplete Margin="Margin.Dense" Dense="true" T="int" Value="pkm.Nature" SearchFunc="@SearchNatures"
                 ToStringFunc="@(e=> Util.GetNaturesList("en")[e])" MaxItems="null" ValueChanged="NatureChanged" Label="Nature" />
}

@if (saveFile.Generation >= 8)
{
    <MudAutocomplete Margin="Margin.Dense" Dense="true" T="int" Value="pkm.StatNature" SearchFunc="@SearchNatures"
                 ToStringFunc="@(e=> Util.GetNaturesList("en")[e])" MaxItems="null" ValueChanged="pkm.SetNature" Label="Stat Nature" />
}

@if (FormInfo.HasFormSelection(pkm.PersonalInfo, pkm.Species, pkm.Format))
{
    var list = FormConverter.GetFormList(pkm.Species, GameInfo.Strings.types, GameInfo.Strings.forms, new[] { "-", "M",
"F"}, saveFile.Generation);
    <MudSelect T="int" Value="@pkm.Form" ValueChanged="SetForm" Label="Form" ToStringFunc="@(e => list[e])"
           AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense" Dense>
        @foreach (var (form, index) in list.Select((form, index) => (form, index)))
        {
            <MudSelectItem Value="index" />
        }
        </MudSelect>
}

@if (saveFile.Generation >= 2)
{
    <MudAutocomplete Margin="Margin.Dense" Dense="true" T="int" Value="pkm.HeldItem" SearchFunc="@SearchItems"
                 ToStringFunc="@(e=> Util.GetItemsList("en")[e])" MaxItems="10" ValueChanged="ItemsChanged" Label="Item" />
}

<AbilityPicker />
